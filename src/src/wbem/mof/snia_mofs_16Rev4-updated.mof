/*
 * Only a select few are actually included from the SNIA mofs
 */
 
 
// Copyright (c) 2010 SNIA.  All rights reserved.
// ==================================================================
//  SNIA_ErasureCapabilities
// ==================================================================
   [Experimental, Version ( "1.5.0" ), 
    UMLPackagePath ( "SNIA::Capabilities" ), 
    Description ( 
       "Capabilities for the storage element protection functionality" )
    ]
class SNIA_ErasureCapabilities : CIM_Capabilities {

      [Description ( "List of erasure methods supported" )
       ]
   string ErasureMethods[];

      [Description ( 
          "Erasure method to use if none is specified for the "
          "storage element being returned to the storage pool" )
       ]
   string DefaultErasureMethod;

      [Description ( 
          "Indicates that a storage elements can be erased when "
          "returning to the storage pool. Whether they are erased "
          "or not is dependent upon the ErasureSetting associated "
          "to that storage element" )
       ]
   boolean CanEraseOnReturnToStoragePool;

      [Description ( 
          "List of supported element types for ErasureService.Erase method ."
           ), 
       ValueMap { "1", "2", "3" }, 
       Values { "StorageVolume", "LogicalDisk", "StorageExtent" }
       ]
   uint16 ElementTypesSupported[];


};

// Copyright (c) 2010 SNIA.  All rights reserved.
// ==================================================================
//  SNIA_ErasureService
// ==================================================================
   [Experimental, Version ( "1.5.0" ), 
    UMLPackagePath ( "SNIA::Service" ), 
    Description ( 
       "This service contains the Erase method used to erase storage "
       "elements (StorageVolumes or LogicalDisks)" )
    ]
class SNIA_ErasureService : CIM_Service {


      [Description ( 
          "Erase the contents of a storage element by using one of "
          "the supported erasure methods." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x1000", 
          "0x1001..0x7FFF", "0x8000..0xFFFF" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unspecified Error", "Timeout", "Failed", 
          "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }
       ]
   uint32 Erase(
         [Description ( "Reference to the job created, if any" ), 
          OUT]
      CIM_Job REF Job, 
         [Description ( 
             "StorageVolume or LogicalDisk to be erased" ), 
          IN]
      CIM_StorageExtent REF Element, 
         [Description ( 
             "Enumeration indicating the type of element being "
             "erased. 1: StorageVolume 2: LogicalDisk" ), 
          ValueMap { "1", "2" }, 
          Values { "StorageVolume", "LogicalDisk" }, 
          IN]
      uint16 ElementType, 
         [Description ( 
             "Erasure method to use. This must match one of the "
             "methods listed in the "
             "ErasureConfigurationService\'s "
             "SupportedErasureMethods property. If NULL, then "
             "the DefaultErasureMethod from the "
             "ErasureCapabilites will be used as the erasure "
             "method" ), 
          IN]
      string ErasureMethod
);

};
   [Experimental, Version ( "1.7.0" ),
    UMLPackagePath ( "CIM::Core::Resource" ),
    Description (
       "NamespaceSetting reflects the parameters specified during persistent "
       "memory namespace creation or modification that define the quality of "
       "service offered by the associated PersistentMemoryNamespace.")]
class CIM_NamespaceSettings : CIM_ResourceAllocationSettingData {

      [Override ( "ResourceType" ),
       Description (
          "The type of resource this allocation setting represents." ),
       ValueMap { "0", "1", "32", "35", "36" "..", "0x8000..0xFFFF" },
       Values { "Unknown", "Other", "Storage Volume", "Byte Addressable Persistent Memory",
	  "Block Addressable Persistent Memory", "DMTF reserved", "Vendor Reserved" },
       ModelCorrespondence {
          "CIM_ResourceAllocationSettingData.OtherResourceType",
          "CIM_ResourceAllocationSettingData.ResourceSubType" }]
   uint16 ResourceType;

      [Description (
          "The type of access supported for the namespace."),
       ValueMap { "0", "2", "3", "4", "..", "0x8000..0xFFFF" },
       Values { "Unknown", "Read", "Write", "Read/Write",
	  "DMTF reserved", "Vendor Reserved" }]
   uint16 AccessType;

      [Description (
          "Describes preferences relating to the allocation that "
	  "can be described by flags"),
       ValueMap { "0", "2", "3", "4", "5", "..", "0x8000..0xFFFF" },
       Values { "Unknown", "None", "Best Performance", "Smallest Size", "Copy On Write",
	"DMTF reserved", "Vendor Reserved" }]
   uint16 Optimize;


};
